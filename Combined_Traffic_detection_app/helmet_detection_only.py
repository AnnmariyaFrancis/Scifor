# -*- coding: utf-8 -*-
"""Helmet_detection_only.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1GcwNI2KAqlQhUK7SvdHt1NPECxX2fhSX
"""

#!pip install easyocr
#!pip install imutils
import cv2
import matplotlib.pyplot as plt

# Load the helmet cascade classifier
plate_cascade = cv2.CascadeClassifier(r'/content/haarcascade_helmet.xml')
img = cv2.imread(r'/content/IMG_5903.jpg')
conv_img = cv2.cvtColor(img, cv2.COLOR_BGR2RGB)
plt.imshow(conv_img)

# Convert the image to grayscale
img_gray = cv2.cvtColor(conv_img, cv2.COLOR_BGR2GRAY)
plt.imshow(img_gray)

# Detect plates
for i in range(1, 100):
    plate = plate_cascade.detectMultiScale(img_gray, scaleFactor=1.1, minNeighbors=i, minSize=(60, 60))
    if len(plate) == 1:
        (x, y, w, h) = plate[0]
        cv2.rectangle(conv_img, (x, y), (x + 4 * w, y + 4 * h), color=(0, 0, 255), thickness=2)
        plt.imshow(conv_img)
        break
else:
    import cv2
    import numpy as np
    import imutils
    import easyocr


    gray = cv2.cvtColor(img, cv2.COLOR_BGR2GRAY)
    plt.imshow(cv2.cvtColor(gray, cv2.COLOR_BGR2RGB))

    bfilter = cv2.bilateralFilter(gray, 11, 17, 17)  # Noise reduction
    edged = cv2.Canny(bfilter, 30, 200)  # Edge detection
    plt.imshow(cv2.cvtColor(edged, cv2.COLOR_BGR2RGB))

    keypoints = cv2.findContours(edged.copy(), cv2.RETR_TREE, cv2.CHAIN_APPROX_SIMPLE)
    contours = imutils.grab_contours(keypoints)
    contours = sorted(contours, key=cv2.contourArea, reverse=True)[:10]
    location = None
    for contour in contours:
        approx = cv2.approxPolyDP(contour, 10, True)
        if len(approx) == 4:
            location = approx
            break

    mask = np.zeros(gray.shape, np.uint8)
    new_image = cv2.drawContours(mask, [location], 0, 255, -1)
    new_image = cv2.bitwise_and(img, img, mask=mask)
    plt.imshow(cv2.cvtColor(new_image, cv2.COLOR_BGR2RGB))

    (x, y) = np.where(mask == 255)
    (x1, y1) = (np.min(x), np.min(y))
    (x2, y2) = (np.max(x), np.max(y))
    cropped_image = gray[x1:x2 + 1, y1:y2 + 1]
    reader = easyocr.Reader(['en'])
    result = reader.readtext(cropped_image)
    len(result)
    text=''
    for i in range(0,len(result)):
       new_text= result[i][-2]
       text += new_text
    font = cv2.FONT_HERSHEY_SIMPLEX

    # Determine the position for text outside the rectangle
    text_position = (approx[0][0][0], approx[1][0][1] - 20)  # Adjust the Y-coordinate as needed

    # Draw the text
    res = cv2.putText(img, text=text, org=text_position, fontFace=font, fontScale=2, color=(255,255, 255), thickness=4,
                    lineType=cv2.LINE_AA)

    # Draw the rectangle
    res = cv2.rectangle(img, tuple(approx[0][0]), tuple(approx[2][0]), (0, 255,0), 3)

    # Display the result using Matplotlib
    plt.imshow(cv2.cvtColor(res, cv2.COLOR_BGR2RGB))
plt.show()