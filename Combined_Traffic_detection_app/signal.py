# -*- coding: utf-8 -*-
"""Signal.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1nybsnAfOj1RBmA1JWzd0KtgIH3V1DbVH
"""

!pip install tensorflow tensorflow-hub
import tensorflow as tf
import matplotlib.pyplot as plt
import tensorflow_hub as hub
from tensorflow import keras
from tensorflow.keras.preprocessing.image import ImageDataGenerator
from tensorflow.keras.layers import Dense, GlobalAveragePooling2D
from tensorflow.keras.models import Model


image_size = (224, 224)


base_model = keras.applications.MobileNetV2(input_shape=image_size + (3,), include_top=False, weights='imagenet')
base_model.trainable = False


x = GlobalAveragePooling2D()(base_model.output)
x = Dense(1024, activation='relu')(x)
predictions = Dense(1, activation='sigmoid')(x)

model = Model(inputs=base_model.input, outputs=predictions)

model.compile(optimizer=keras.optimizers.Adam(learning_rate=0.0001),
              loss='binary_crossentropy',
              metrics=['accuracy'])


train_datagen = ImageDataGenerator(
    rescale=1.0 / 255,
    shear_range=0.2,
    zoom_range=0.2,
    horizontal_flip=True)

train_generator = train_datagen.flow_from_directory(
    '/content/drive/MyDrive/Images',
    target_size=image_size,
    batch_size=32,
    class_mode='binary')

model.fit(train_generator, epochs=10)
import numpy as np
from tensorflow.keras.preprocessing import image

new_image_path = '/content/drive/MyDrive/Images/No Violation/WhatsApp Image 2023-11-05 at 15.21.14_348a58d0.jpg'
new_image = image.load_img(new_image_path, target_size=image_size)
new_image = image.img_to_array(new_image)
new_image = np.expand_dims(new_image, axis=0)
new_image = new_image / 255.0
predictions = model.predict(new_image)

print(predictions)

binary_prediction = (predictions > 0.5).astype(int)
print(binary_prediction)
from google.colab.patches import cv2_imshow
if binary_prediction[0] == 1:

    img = cv2.imread(new_image_path)
    cv2_imshow(img)
    cv2.waitKey(0)
    cv2.destroyAllWindows()
else:
    print("The model predicted no signal violation for the image.")

model.save('signal.h5')