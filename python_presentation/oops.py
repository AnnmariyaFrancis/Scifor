# -*- coding: utf-8 -*-
"""oops.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1udIManNmkH6ENiEZgbvGtVGpNvqBaWBg

object
"""

class Person:
         def __init__(self, name, age):
             self.name = name
             self.age = age

         def introduce(self):
             return f"My name is {self.name}, and I am {self.age} years old."

p1=Person("veena",23)
p1.introduce()

"""creating python object"""

class Computer:
   def __init__(self,cpu,ram):
        self.cpu=cpu
        self.ram=ram
com1=Computer('i3',8)
com2=Computer('i5',16)
print(id(com1))

"""self parameter"""

class Computer:
   def __init__(self,cpu,ram):
        self.cpu=cpu
        self.ram=ram
   def config(self):
        print("Config is",self.cpu,self.ram)
com1=Computer('i5',16)
com2=Computer('Ryzan 3',8)
com1.config()
com2.config()

"""class Attributes"""

class Car:
    # Class attribute
    category = "Automobile"

# Accessing a class attribute
print(Car.category)

"""Instance Attributes"""

class Person:
    def __init__(self, name, age):
        # Instance attributes
        self.name = name
        self.age = age

# Creating instances and accessing instance attributes
person1 = Person("Alice", 30)
print(person1.name)
print(person1.age)

"""class namespace"""

#To understand class namespace
#create class
class Student:
  #Create class var
  n=10
#Access class var in class namespace
print(Student.n)
#Modify in class namespace
Student.n+=1
#Access class var in class namespace
print(Student.n)
#Access class var  in all instance
s1=Student()
s2=Student()
#Access class var in instance namespace
print("s1.n",s1.n)
print("s2.n",s2.n)

"""Instance namespace"""

#To understand instance namespace
#create the class
class Student:
  #create class var
  n=10
s1=Student()
s2=Student()
#Modify the class var in instance namespaces
s1.n+=1
#Access class var in instance namespace
print("s1.n:",s1.n)
print("s2.n:",s2.n)

"""Methods"""

class Person:
  def __init__(self,name,age):
    self.name=name
    self.age=age
  def introduce(self):
    return f"My name is {self.name},and I am {self.age} years old"
p1=Person("Silpa",23)
p1.introduce()

"""Instance Methods"""

class shape:
    # Calling Constructor
    def __init__(self, edge, color):
        self.edge = edge
        self.color = color
    # Instance Method
    def finEdges(self):
        return self.edge
    # Instance Method
    def modifyEdges(self, newedge):
        self.edge = newedge
# Driver Code
circle = shape(0, 'red')
square = shape(4, 'blue')
# Calling Instance Method
print("No. of edges for circle: "+ str(circle.finEdges()))
# Calling Instance Method
square.modifyEdges(6)
print("No. of edges for square: "+ str(square.finEdges()))

"""Accessor and mutator"""

#create the class
class Student:
  #Define mutator
  def setName(self,name):
    self.name=name
  #Define accessor
  def getName(self):
    return self.name
#create an objects
s=Student()
#set the name
s.setName("Ram")
#print the name
print("Name:",s.getName())

"""class method"""

class Bird:
  #Define the class var here
  wings=2
  #Define the class method
  @classmethod
  def fly(cls,name):
    print("{} flies with {} wings".format(name,cls.wings))
#call
Bird.fly("Sparrow")
Bird.fly("Pigeon")

"""Static method"""

class MathOperations:
    @staticmethod
    def add(x, y):
        return x + y

    @staticmethod
    def multiply(x, y):
        return x * y

result_add = MathOperations.add(3, 5)
result_multiply = MathOperations.multiply(4, 6)
print(result_add)
print(result_multiply)

"""magic methods"""

class Sample_class:
	some_variable = 20

	# method of the class
	def my_method(self):
		print("GeeksForGeeks")

# check if class exists
print(Sample_class())
del Sample_class
print(Sample_class())

class Person:
    def __init__(self, name):
        self.name = name
person = Person("Alice")
#del person
print(person)

class Computer:
    def __init__(self):
          self.name="Anjali"
          self.age=26
    def update(self):
          self.age=30
    def compare(self,other):
          if  self.age==other.age:
              return True
c1=Computer()
c2=Computer()
c1.name="Anju"
c1.update()
print(c1.age)
if c1.compare(c2):
   print("they are same")
else:
  print("they are not same")

"""Magic methods

str
"""

class CustomizedInteger:
  def __init__(self,integer):
    self.integer=integer
int1=CustomizedInteger(4)
print(int1)

class CustomizedInteger:
  def __init__(self,integer):
    self.integer=integer
  def __str__(self):
    return f'Customized Integer {self.integer}'
int1=CustomizedInteger(4)
print(int1)

"""repr"""

class Vehicle:
    def __init__(self, make, model, year, mileage):
        self.make = make
        self.model = model
        self.year = year
        self.mileage = mileage

    def __repr__(self):
        return f"Vehicle(make='{self.make}', model='{self.model}', year={self.year}, mileage={self.mileage})"

# Creating an instance
car = Vehicle("Toyota", "Corolla", 2020, 50000)
print(car)

"""len"""

class Basket:
  def __init__(self):
    self.items=[]
  def add_item(self,item):
    self.items.append(item)
  def __len__(self):
    return len(self.items)
shopping_basket=Basket()
shopping_basket.add_item("Apple")
shopping_basket.add_item("Banana")
shopping_basket.add_item("Orange")
print(len(shopping_basket))

"""add"""

class GFG:

	def __init__(self, val):
		self.val = val

	def __add__(self, val2):
		return GFG(self.val + val2.val)

obj1 = GFG("Geeks")
obj2 = GFG("ForGeeks")
obj3 = obj1 + obj2
print(obj3.val)

"""destructor"""

class Example:

    # Initializing
    def __init__(self):
        print("Example Instance.")

    # Calling destructor
    def __del__(self):
        print("Destructor called, Example deleted.")

obj = Example()
del obj

"""Attribute access and modification"""

#To understand inner class
class Person:
  def __init__(self):
    self.name="Ram"
    self.db=self.Dob()
  def display(self):
    print("Name:",self.name)
  #define an inner class
  class Dob:
    def __init__(self):
      self.dd=10
      self.mm=2
      self.yy=2002
    def display(self):
      print("DoB:{}/{}/{}".format(self.dd,self.mm,self.yy))
  #creating object
p=Person()
p.display()
#creating inner class objects
i=p.db
i.display()

"""str"""

class Employee:
  def __init__(self,name,age):
    self.name=name
    self.age=age
  def __str__(self):
     return f"My name is {self.name} age is {self.age}"
  def __repr__(self):
    return "This is from the repr method"
emp=Employee('Aman',30)
print(emp) #without str it only prins address of the object

class Calculator:
  def __init__(self):
    self.resul=0
  def add(self,add_number):
    self.add_number=add_number
    self.resul=self.resul+self.add_number
  def subtract(self,sub_number):
    self.sub_number=sub_number
    self.resul=self.resul-self.sub_number
  def multi(self,multi_number):
    self.multi_number=multi_number
    self.resul=self.resul*multi_number
  def div(self,div_number):
    self.div_number=div_number
    if div_number==0:
      print("division is not possible")
    else:
      self.resul=self.resul/div_number
  def get_result(self):
    return self.resul
c1=Calculator()
c1.add(3)
print(c1.get_result())