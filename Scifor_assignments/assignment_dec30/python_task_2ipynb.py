# -*- coding: utf-8 -*-
"""Python Task 2ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1U143w_wkpfqmd_TQz1pictzuZj8w-m21

Question 1: Distance Matrix Calculation
"""

import pandas as pd
df=pd.read_csv('/content/dataset-3.csv')

df.head()

import pandas as pd

def calculate_distance_matrix(dataframe):
    distance_df = dataframe.copy()
    distances = {}
    for index, row in dataframe.iterrows():
        start_id = row['id_start']
        end_id = row['id_end']
        distance = row['distance']
        distances[(start_id, end_id)] = distance
        distances[(end_id, start_id)] = distance
    unique_ids = dataframe['id_start'].unique()
    num_ids = len(unique_ids)
    distance_matrix = pd.DataFrame(0, index=unique_ids, columns=unique_ids)

    for i in range(num_ids):
        for j in range(num_ids):
            id_start = unique_ids[i]
            id_end = unique_ids[j]

            if (id_start, id_end) in distances:
                distance_matrix.loc[id_start, id_end] = distances[(id_start, id_end)]

    distance_matrix.values[[range(num_ids)], [range(num_ids)]] = 0

    return distance_matrix

df = pd.read_csv('dataset-3.csv')

result_matrix = calculate_distance_matrix(df)
print(result_matrix)

"""Question 2: Unroll Distance Matrix"""

import pandas as pd

def unroll_distance_matrix(distance_dataframe):
    # Filter out rows where id_start and id_end are the same
    filtered_df = distance_dataframe[distance_dataframe['id_start'] != distance_dataframe['id_end']]

    # Create a copy of the DataFrame to store unrolled distances
    unrolled_df = filtered_df.copy()

    # Rename columns for clarity
    unrolled_df = unrolled_df.rename(columns={'id_start': 'id_end', 'id_end': 'id_start'})

    # Append the modified DataFrame to the original, excluding duplicate pairs
    unrolled_distances = pd.concat([filtered_df, unrolled_df]).drop_duplicates(['id_start', 'id_end']).reset_index(drop=True)

    return unrolled_distances

# Assuming 'distance_dataframe' is the DataFrame obtained previously
# Replace 'distance_dataframe' with your DataFrame variable
unrolled_distances = unroll_distance_matrix(df)
print(unrolled_distances)

"""Question 3: Finding IDs within Percentage Threshold"""

def find_ids_within_ten_percentage_threshold(df, reference_value):
    avg_distance_reference = df[df['id_start'] == reference_value]['distance'].mean()
    lower_threshold = avg_distance_reference * 0.9
    upper_threshold = avg_distance_reference * 1.1
    filtered_ids = df[(df['id_start'] != reference_value) &
                      (df['distance'] >= lower_threshold) &
                      (df['distance'] <= upper_threshold)]['id_start'].unique()
    sorted_filtered_ids = sorted(filtered_ids)

    return sorted_filtered_ids
reference_value = 1001400
result_ids_within_threshold = find_ids_within_ten_percentage_threshold(unrolled_distances, reference_value)
print(result_ids_within_threshold)

"""Question 4: Calculate Toll Rate"""

import pandas as pd

def calculate_toll_rate(input_dataframe):
    dataframe_with_rates = input_dataframe.copy()
    dataframe_with_rates['moto'] = input_dataframe['distance'] * 0.8
    dataframe_with_rates['car'] = input_dataframe['distance'] * 1.2
    dataframe_with_rates['rv'] = input_dataframe['distance'] * 1.5
    dataframe_with_rates['bus'] = input_dataframe['distance'] * 2.2
    dataframe_with_rates['truck'] = input_dataframe['distance'] * 3.6

    return dataframe_with_rates
result_with_rates = calculate_toll_rate(unrolled_distances)
print(result_with_rates)

"""Question 5: Calculate Time-Based Toll Rates"""

import pandas as pd
from datetime import datetime, timedelta

def calculate_time_based_toll_rates(input_dataframe):
    # Create a copy of the DataFrame to store toll rates
    dataframe_with_rates = input_dataframe.copy()

    # Define time intervals and their corresponding discount factors for weekdays and weekends
    weekdays_intervals = [
        {'start_time': '00:00:00', 'end_time': '10:00:00', 'discount_factor': 0.8},
        {'start_time': '10:00:00', 'end_time': '18:00:00', 'discount_factor': 1.2},
        {'start_time': '18:00:00', 'end_time': '23:59:59', 'discount_factor': 0.8}
    ]
    weekends_intervals = [
        {'start_time': '00:00:00', 'end_time': '23:59:59', 'discount_factor': 0.7}
    ]

    # Function to calculate rates based on time intervals and vehicle types
    def calculate_rates(row):
        current_time = row['start_time'].time()
        if row['start_day'] in ['Saturday', 'Sunday']:
            interval = weekends_intervals[0]
        else:
            interval = next((intv for intv in weekdays_intervals if
                             datetime.strptime(interval['start_time'], '%H:%M:%S').time() <= current_time <= datetime.strptime(interval['end_time'], '%H:%M:%S').time()), None)

        if interval:
            discount_factor = interval['discount_factor']
            row['moto'] *= discount_factor
            row['car'] *= discount_factor
            row['rv'] *= discount_factor
            row['bus'] *= discount_factor
            row['truck'] *= discount_factor

        return row

result_with_time_rates = calculate_time_based_toll_rates(result_with_rates)
print(result_with_time_rates)

import pandas as pd
from datetime import time

def calculate_time_based_toll_rates(input_dataframe):
    # Create a copy of the DataFrame to store toll rates
    dataframe_with_rates = input_dataframe.copy()

    # Define time ranges for weekdays and weekends
    weekday_time_ranges = [(time(0, 0), time(10, 0)), (time(10, 0), time(18, 0)), (time(18, 0), time(23, 59, 59))]
    weekend_time_range = (time(0, 0), time(23, 59, 59))

    # Map day names to day numbers
    days_mapping = {0: 'Monday', 1: 'Tuesday', 2: 'Wednesday', 3: 'Thursday', 4: 'Friday', 5: 'Saturday', 6: 'Sunday'}

    # Initialize lists to store start_day, start_time, end_day, and end_time
    start_day_list = []
    start_time_list = []
    end_day_list = []
    end_time_list = []

    # Iterate through each row to calculate time-based toll rates
    for index, row in input_dataframe.iterrows():
        for day in range(7):  # For each day of the week

            # Calculate day names
            start_day = days_mapping[day]
            end_day = days_mapping[day]

            # Assign time ranges based on weekdays or weekends
            if day < 5:  # Weekdays
                for start_time, end_time in weekday_time_ranges:
                    start_day_list.append(start_day)
                    start_time_list.append(start_time)
                    end_day_list.append(end_day)
                    end_time_list.append(end_time)
            else:  # Weekends
                start_day_list.append(start_day)
                start_time_list.append(weekend_time_range[0])
                end_day_list.append(end_day)
                end_time_list.append(weekend_time_range[1])

    # Add new columns for start_day, start_time, end_day, and end_time
    dataframe_with_rates['start_day'] = start_day_list
    dataframe_with_rates['start_time'] = start_time_list
    dataframe_with_rates['end_day'] = end_day_list
    dataframe_with_rates['end_time'] = end_time_list

    return dataframe_with_rates

# Assuming 'input_dataframe' is the DataFrame provided in the question
# Replace 'input_dataframe' with your DataFrame variable
result_with_time_rates = calculate_time_based_toll_rates(result_with_rates)
print(result_with_time_rates)

import pandas as pd
from datetime import time

def calculate_time_based_toll_rates(input_dataframe):
    # Create a copy of the DataFrame to store toll rates
    dataframe_with_rates = input_dataframe.copy()

    # Define time ranges for weekdays and weekends
    weekday_time_ranges = [(time(0, 0), time(10, 0)), (time(10, 0), time(18, 0)), (time(18, 0), time(23, 59, 59))]
    weekend_time_range = (time(0, 0), time(23, 59, 59))

    # Map day names to day numbers
    days_mapping = {0: 'Monday', 1: 'Tuesday', 2: 'Wednesday', 3: 'Thursday', 4: 'Friday', 5: 'Saturday', 6: 'Sunday'}

    # Initialize lists to store start_day, start_time, end_day, and end_time
    start_day_list = []
    start_time_list = []
    end_day_list = []
    end_time_list = []

    # Iterate through each row to calculate time-based toll rates
    for index, row in input_dataframe.iterrows():
        for day in range(7):  # For each day of the week

            # Calculate day names
            start_day = days_mapping[day]
            end_day = days_mapping[day]

            # Assign time ranges based on weekdays or weekends
            if day < 5:  # Weekdays
                for start_time, end_time in weekday_time_ranges:
                    start_day_list.append(start_day)
                    start_time_list.append(start_time)
                    end_day_list.append(end_day)
                    end_time_list.append(end_time)
            else:  # Weekends
                start_day_list.append(start_day)
                start_time_list.append(weekend_time_range[0])
                end_day_list.append(end_day)
                end_time_list.append(weekend_time_range[1])

    # Add new columns for start_day, start_time, end_day, and end_time
    dataframe_with_rates['start_day'] = start_day_list
    dataframe_with_rates['start_time'] = start_time_list
    dataframe_with_rates['end_day'] = end_day_list
    dataframe_with_rates['end_time'] = end_time_list

    # Apply discount factors based on time ranges
    weekday_conditions = [
        (dataframe_with_rates['start_time'] <= time(10, 0)) & (dataframe_with_rates['end_time'] >= time(0, 0)),
        (dataframe_with_rates['start_time'] <= time(18, 0)) & (dataframe_with_rates['end_time'] >= time(10, 0)),
        (dataframe_with_rates['start_time'] <= time(23, 59, 59)) & (dataframe_with_rates['end_time'] >= time(18, 0))
    ]

    # Apply discount factors for weekdays
    dataframe_with_rates['moto'] *= pd.Series([0.8, 1.2, 0.8], index=dataframe_with_rates.index).where(pd.concat(weekday_conditions, axis=1).any(axis=1), 1)
    dataframe_with_rates['car'] *= pd.Series([0.8, 1.2, 0.8], index=dataframe_with_rates.index).where(pd.concat(weekday_conditions, axis=1).any(axis=1), 1)
    dataframe_with_rates['rv'] *= pd.Series([0.8, 1.2, 0.8], index=dataframe_with_rates.index).where(pd.concat(weekday_conditions, axis=1).any(axis=1), 1)
    dataframe_with_rates['bus'] *= pd.Series([0.8, 1.2, 0.8], index=dataframe_with_rates.index).where(pd.concat(weekday_conditions, axis=1).any(axis=1), 1)
    dataframe_with_rates['truck'] *= pd.Series([0.8, 1.2, 0.8], index=dataframe_with_rates.index).where(pd.concat(weekday_conditions, axis=1).any(axis=1), 1)

    # Apply constant discount factor for weekends
    dataframe_with_rates['moto'] *= 0.7
    dataframe_with_rates['car'] *= 0.7
    dataframe_with_rates['rv'] *= 0.7
    dataframe_with_rates['bus'] *= 0.7
    dataframe_with_rates['truck'] *= 0.7

    return dataframe_with_rates

# Sample DataFrame provided in the question
sample_df = pd.DataFrame({
    'id_start': [1001400, 1001402, 1001404, 1001406, 1001408],
    'id_end': [1001402, 1001404, 1001406, 1001408, 1001410],
    'distance': [9.7, 20.2, 16.0, 21.7, 11.1],
    'moto': [7.76, 16.16, 12.80, 17.36, 8.88],
    'car': [11.64, 24.24, 19.20, 26.04, 13.32],
    'rv': [14.55, 30.30, 24.00, 32.55, 16.65],
    'bus': [21.34, 44.44, 35.20, 47.74, 24.42],
    'truck': [34.92, 72.72, 57.60, 78.12, 39.96]
})

# Call the function with the sample DataFrame
result_with_time_rates = calculate_time_based_toll_rates(result_with_rates)

import warnings
warnings.filterwarnings('ignore')

import pandas as pd
from datetime import time

def calculate_time_based_toll_rates(input_dataframe):
    # Create a copy of the DataFrame to store toll rates
    dataframe_with_rates = pd.DataFrame()

    # Define time ranges for weekdays and weekends
    weekday_time_ranges = [(time(0, 0), time(10, 0)), (time(10, 0), time(18, 0)), (time(18, 0), time(23, 59, 59))]
    weekend_time_range = (time(0, 0), time(23, 59, 59))

    # Map day names to day numbers
    days_mapping = {0: 'Monday', 1: 'Tuesday', 2: 'Wednesday', 3: 'Thursday', 4: 'Friday', 5: 'Saturday', 6: 'Sunday'}

    # Iterate through each row to calculate time-based toll rates
    for index, row in input_dataframe.iterrows():
        for day in range(7):  # For each day of the week

            # Calculate day names
            start_day = days_mapping[day]
            end_day = days_mapping[day]

            # Assign time ranges based on weekdays or weekends
            if day < 5:  # Weekdays
                for start_time, end_time in weekday_time_ranges:
                    row['start_day'] = start_day
                    row['start_time'] = start_time
                    row['end_day'] = end_day
                    row['end_time'] = end_time

                    # Apply discount factor based on time intervals
                    if start_time <= row['start_time'] <= end_time:
                        if 0 <= row['start_time'].second <= 1:  # Check for 00:00:00
                            row['moto'] *= 0.8
                            row['car'] *= 0.8
                            row['rv'] *= 0.8
                            row['bus'] *= 0.8
                            row['truck'] *= 0.8
                        elif 10 <= row['start_time'].hour < 18:  # Check for 10:00:00 to 18:00:00
                            row['moto'] *= 1.2
                            row['car'] *= 1.2
                            row['rv'] *= 1.2
                            row['bus'] *= 1.2
                            row['truck'] *= 1.2
                        else:  # Check for 18:00:00 to 23:59:59
                            row['moto'] *= 0.8
                            row['car'] *= 0.8
                            row['rv'] *= 0.8
                            row['bus'] *= 0.8
                            row['truck'] *= 0.8
                    else:  # Times not covered (apply default discount)
                        row['moto'] *= 0.8
                        row['car'] *= 0.8
                        row['rv'] *= 0.8
                        row['bus'] *= 0.8
                        row['truck'] *= 0.8

                    dataframe_with_rates = dataframe_with_rates.append(row, ignore_index=True)
            else:  # Weekends
                row['start_day'] = start_day
                row['start_time'] = weekend_time_range[0]
                row['end_day'] = end_day
                row['end_time'] = weekend_time_range[1]

                # Apply constant discount factor for weekends
                row['moto'] *= 0.7
                row['car'] *= 0.7
                row['rv'] *= 0.7
                row['bus'] *= 0.7
                row['truck'] *= 0.7

                dataframe_with_rates = dataframe_with_rates.append(row, ignore_index=True)

    return dataframe_with_rates

# Assuming 'input_dataframe' is the DataFrame provided in the question
# Replace 'input_dataframe' with your DataFrame variable
result_with_time_rates = calculate_time_based_toll_rates(result_with_rates)
print(result_with_time_rates)